#r "nuget: Trulla"

let [<Literal>] ApiTextTemplate = """

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vide.UI.Avalonia

open System
open System.Runtime.CompilerServices
open Vide


type AvaloniaControl = Avalonia.Controls.Control


type Controls = class end


module ControlBuilders =
{{for control in controls}}
    type {{control.controlBuilderName}} () =
        inherit {{control.videBuilderName}}<{{control.potGenArg}}{{control.wrappedControlTypeName}}>({{control.ctor}})
    type Controls with static member {{control.controlBuilderName}} = ControlBuilders.{{control.controlBuilderName}}()
{{end}}


[<Extension>]
type PropertiesExtensions =
    {{for prop in props}}
    [<Extension>]
    static member inline {{prop.name}}<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_{{prop.name}}: unit -> {{prop.typeName}})
            and 'e : (member set_{{prop.name}}: {{prop.typeName}} -> unit)
        >
        (this: 'nb, value) =
            this.onEval(fun x -> if x.node.{{prop.name}} <> value then x.node.{{prop.name}} <- value)
    {{end}}
    

[<Extension>]
type EventsExtensions =
    {{for evt in events}}
    [<Extension>]
    static member inline {{evt.name}}<'nb,'e,'c,'args when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_{{evt.name}}: (EventHandler<'args> -> unit))
            and 'e: (member remove_{{evt.name}}: (EventHandler<'args> -> unit))
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_{{evt.name}}(dotnetEventHandler)
        )
    {{end}}


module AttachedProperties =
    {{for apOwner in apOwners}}
    type {{apOwner.typeName}}<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    {{end}}

{{for apOwner in apOwners}}
[<Extension>]
type {{apOwner.typeName}}AttachedProperties =
    
    // Entry
    
    [<Extension>]
    static member inline {{apOwner.typeName}}(this: #NodeBuilder<_,AvaloniaContext>)  =
        { AttachedProperties.{{apOwner.typeName}}.target = this }

    // Properties
    {{for ap in apOwner.properties}}
    [<Extension>]
    static member inline {{ap.name}}(this: AttachedProperties.{{apOwner.typeName}}<_,_>, value) =
        this.target.onEval(fun x -> {{apOwner.fullTypeName}}.Set{{ap.name}}(x.node, value))
    {{end}}
{{end}}


"""

#r "nuget: Trulla"

let [<Literal>] ApiTextTemplate = """

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vide.UI.Avalonia

open System
open System.Runtime.CompilerServices
open Vide

type AvaloniaControl = Avalonia.Controls.Control

module ControlBuilders =
{{for control in controls}}
    type {{control.controlBuilderName}} () =
        inherit {{control.videBuilderName}}<{{control.potGenArg}}{{control.wrappedControlTypeName}}>({{control.ctor}})
{{end}}


// -------------------------------


[<Extension>]
type NodeBuilderExtensions =
    class
        // Properties
        // Events
    end

[<Extension>]
type ContentLeafPotBuilderExtensions =
    class
        // Properties
        // Events
    end

[<Extension>]
type ContentControlRetBuilderExtensions =
    class
        // Properties
        // Events
    end

[<Extension>]
type PanelRetBuilderExtensions =
    class
        // Properties
        // Events
    end


// -------------------------------


{{for control in controls}}
[<Extension>]
type {{control.controlBuilderName}}Extensions =
    class
        // Properties

        {{for prop in control.properties}}
        [<Extension>]
        static member {{prop.name}}(this: #ControlBuilders.{{control.controlBuilderName}}, value) =
            this.onEval(fun x -> if x.node.{{prop.name}} <> value then x.node.{{prop.name}} <- value
            )
        {{end}}
    
        // Events
        
        {{for evt in control.events}}
        [<Extension>]
        static member {{evt.name}}(this: #ControlBuilders.{{control.controlBuilderName}}, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.{{evt.name}}.Add(wrappedHandler))
        {{end}}
    end
{{end}}

// // [<Extension>]
// // type TextBlockExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member Text(this: #ControlBuilders.TextBlock, value) =
// //             this.onEval(fun x -> if x.node.Text <> value then x.node.Text <- value)
        
// //         [<Extension>]
// //         static member TextTrimming(this: #ControlBuilders.TextBlock, value) =
// //             this.onEval(fun x -> if x.node.TextTrimming <> value then x.node.TextTrimming <- value)
    
// //         // Events
// //     end

// // [<Extension>]
// // type TextBoxExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member Text(this: #ControlBuilders.TextBox, value) =
// //             this.onEval(fun x -> if x.node.Text <> value then x.node.Text <- value
// //             )
    
// //         // Events
    
// //         [<Extension>]
// //         static member TextChanged(this: #ControlBuilders.TextBox, handler) =
// //             this.onInit(fun x ->
// //                 let wrappedHandler = Event.handle x.node x.host handler
// //                 x.node.TextChanged.Add(wrappedHandler))
// //                 //x.node.AddHandler(Avalonia.Controls.TextBox.TextChangedEvent,)

// //     end

// // [<Extension>]
// // type ButtonExtensions =
// //     class
// //         // Properties
       
// //         // Events
    
// //         [<Extension>]
// //         static member Click(this: #ControlBuilders.Button, handler) =
// //             this.onInit(fun x ->
// //                 let wrappedHandler = Event.handle x.node x.host handler
// //                 x.node.Click.Add(wrappedHandler))
// //     end
        
// // [<Extension>]
// // type CheckBoxExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member IsChecked(this: #ControlBuilders.CheckBox, value) =
// //             this.onEval(fun x -> if x.node.IsChecked <> value then x.node.IsChecked <- value)
    
// //         // Events
    
// //         [<Extension>]
// //         static member IsCheckedChanged(this: #ControlBuilders.CheckBox, handler) =
// //             this.onInit(fun x ->
// //                 let wrappedHandler = Event.handle x.node x.host handler
// //                 x.node.IsCheckedChanged.Add(wrappedHandler))
// //     end

// // [<Extension>]
// // type ScrollViewerExtensions =
// //     class
// //         // Properties
        
// //         // Events
// //     end
        
// // [<Extension>]
// // type StackPanelExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member Orientation(this: #ControlBuilders.StackPanel, value) =
// //             this.onEval(fun x -> if x.node.Orientation <> value then x.node.Orientation <- value)
    
// //         // Events
// //     end

// // [<Extension>]
// // type DockPanelExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member LastChildFill(this: #ControlBuilders.DockPanel, value) =
// //             this.onEval(fun x -> if x.node.LastChildFill <> value then x.node.LastChildFill <- value)
    
// //         // Events
// //     end

// -------------------------------


module AttachedProperties =
    {{for apOwner in apOwners}}
    type {{apOwner.typeName}}<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    {{end}}

{{for apOwner in apOwners}}
[<Extension>]
type {{apOwner.typeName}}AttachedProperties =
    class
        // Entry

        [<Extension>]
        static member inline {{apOwner.typeName}}(this: #NodeBuilder<_,AvaloniaContext>)  =
            { AttachedProperties.{{apOwner.typeName}}.target = this }

        // Properties

        {{for ap in apOwner.properties}}
        [<Extension>]
        static member inline {{ap.name}}(this: AttachedProperties.{{apOwner.typeName}}<_,_>, value) =
            this.target.onEval(fun x -> {{apOwner.fullTypeName}}.Set{{ap.name}}(x.node, value))
        {{end}}

    end
{{end}}


// -------------------------------


type Controls =
{{for control in controls}}
    static member {{control.controlBuilderName}} = ControlBuilders.{{control.controlBuilderName}}()
{{end}}

"""

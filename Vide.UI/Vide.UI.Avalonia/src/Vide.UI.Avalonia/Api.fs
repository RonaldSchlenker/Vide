

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vide.UI.Avalonia

open System
open System.Runtime.CompilerServices
open Vide

type AvaloniaControl = Avalonia.Controls.Control

module ControlBuilders =

    type TextBlock () =
        inherit ContentLeafRetBuilder<Avalonia.Controls.TextBlock>()

    type TextBox () =
        inherit ContentLeafPotBuilder<String, Avalonia.Controls.TextBox>(fun node -> node.Text)

    type Button () =
        inherit ContentLeafRetBuilder<Avalonia.Controls.Button>()

    type CheckBox () =
        inherit ContentLeafPotBuilder<Nullable<Boolean>, Avalonia.Controls.CheckBox>(fun node -> node.IsChecked)

    type Grid () =
        inherit PanelRetBuilder<Avalonia.Controls.Grid>()

    type DockPanel () =
        inherit PanelRetBuilder<Avalonia.Controls.DockPanel>()

    type StackPanel () =
        inherit PanelRetBuilder<Avalonia.Controls.StackPanel>()

    type ScrollViewer () =
        inherit ContentLeafRetBuilder<Avalonia.Controls.ScrollViewer>()



// -------------------------------


[<Extension>]
type NodeBuilderExtensions =
    class
        // Properties
        // Events
    end

[<Extension>]
type ContentLeafPotBuilderExtensions =
    class
        // Properties
        // Events
    end

[<Extension>]
type ContentControlRetBuilderExtensions =
    class
        // Properties
        // Events
    end

[<Extension>]
type PanelRetBuilderExtensions =
    class
        // Properties
        // Events
    end


// -------------------------------



[<Extension>]
type TextBlockExtensions =
    class
        // Properties

        
        [<Extension>]
        static member Padding(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Padding <> value then x.node.Padding <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member Text(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Text <> value then x.node.Text <- value
            )
        
        [<Extension>]
        static member FontFamily(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FontFamily <> value then x.node.FontFamily <- value
            )
        
        [<Extension>]
        static member FontSize(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FontSize <> value then x.node.FontSize <- value
            )
        
        [<Extension>]
        static member FontStyle(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FontStyle <> value then x.node.FontStyle <- value
            )
        
        [<Extension>]
        static member FontWeight(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FontWeight <> value then x.node.FontWeight <- value
            )
        
        [<Extension>]
        static member FontStretch(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FontStretch <> value then x.node.FontStretch <- value
            )
        
        [<Extension>]
        static member Foreground(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Foreground <> value then x.node.Foreground <- value
            )
        
        [<Extension>]
        static member LineHeight(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.LineHeight <> value then x.node.LineHeight <- value
            )
        
        [<Extension>]
        static member LetterSpacing(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.LetterSpacing <> value then x.node.LetterSpacing <- value
            )
        
        [<Extension>]
        static member MaxLines(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.MaxLines <> value then x.node.MaxLines <- value
            )
        
        [<Extension>]
        static member TextWrapping(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.TextWrapping <> value then x.node.TextWrapping <- value
            )
        
        [<Extension>]
        static member TextTrimming(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.TextTrimming <> value then x.node.TextTrimming <- value
            )
        
        [<Extension>]
        static member TextAlignment(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.TextAlignment <> value then x.node.TextAlignment <- value
            )
        
        [<Extension>]
        static member TextDecorations(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.TextDecorations <> value then x.node.TextDecorations <- value
            )
        
        [<Extension>]
        static member Inlines(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Inlines <> value then x.node.Inlines <- value
            )
        
        [<Extension>]
        static member BaselineOffset(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.BaselineOffset <> value then x.node.BaselineOffset <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.TextBlock, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.TextBlock, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type TextBoxExtensions =
    class
        // Properties

        
        [<Extension>]
        static member AcceptsReturn(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.AcceptsReturn <> value then x.node.AcceptsReturn <- value
            )
        
        [<Extension>]
        static member AcceptsTab(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.AcceptsTab <> value then x.node.AcceptsTab <- value
            )
        
        [<Extension>]
        static member CaretIndex(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.CaretIndex <> value then x.node.CaretIndex <- value
            )
        
        [<Extension>]
        static member IsReadOnly(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.IsReadOnly <> value then x.node.IsReadOnly <- value
            )
        
        [<Extension>]
        static member PasswordChar(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.PasswordChar <> value then x.node.PasswordChar <- value
            )
        
        [<Extension>]
        static member SelectionBrush(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.SelectionBrush <> value then x.node.SelectionBrush <- value
            )
        
        [<Extension>]
        static member SelectionForegroundBrush(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.SelectionForegroundBrush <> value then x.node.SelectionForegroundBrush <- value
            )
        
        [<Extension>]
        static member CaretBrush(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.CaretBrush <> value then x.node.CaretBrush <- value
            )
        
        [<Extension>]
        static member SelectionStart(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.SelectionStart <> value then x.node.SelectionStart <- value
            )
        
        [<Extension>]
        static member SelectionEnd(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.SelectionEnd <> value then x.node.SelectionEnd <- value
            )
        
        [<Extension>]
        static member MaxLength(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.MaxLength <> value then x.node.MaxLength <- value
            )
        
        [<Extension>]
        static member MaxLines(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.MaxLines <> value then x.node.MaxLines <- value
            )
        
        [<Extension>]
        static member LetterSpacing(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.LetterSpacing <> value then x.node.LetterSpacing <- value
            )
        
        [<Extension>]
        static member LineHeight(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.LineHeight <> value then x.node.LineHeight <- value
            )
        
        [<Extension>]
        static member Text(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Text <> value then x.node.Text <- value
            )
        
        [<Extension>]
        static member SelectedText(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.SelectedText <> value then x.node.SelectedText <- value
            )
        
        [<Extension>]
        static member HorizontalContentAlignment(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.HorizontalContentAlignment <> value then x.node.HorizontalContentAlignment <- value
            )
        
        [<Extension>]
        static member VerticalContentAlignment(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.VerticalContentAlignment <> value then x.node.VerticalContentAlignment <- value
            )
        
        [<Extension>]
        static member TextAlignment(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.TextAlignment <> value then x.node.TextAlignment <- value
            )
        
        [<Extension>]
        static member Watermark(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Watermark <> value then x.node.Watermark <- value
            )
        
        [<Extension>]
        static member UseFloatingWatermark(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.UseFloatingWatermark <> value then x.node.UseFloatingWatermark <- value
            )
        
        [<Extension>]
        static member InnerLeftContent(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.InnerLeftContent <> value then x.node.InnerLeftContent <- value
            )
        
        [<Extension>]
        static member InnerRightContent(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.InnerRightContent <> value then x.node.InnerRightContent <- value
            )
        
        [<Extension>]
        static member RevealPassword(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.RevealPassword <> value then x.node.RevealPassword <- value
            )
        
        [<Extension>]
        static member TextWrapping(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.TextWrapping <> value then x.node.TextWrapping <- value
            )
        
        [<Extension>]
        static member NewLine(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.NewLine <> value then x.node.NewLine <- value
            )
        
        [<Extension>]
        static member IsUndoEnabled(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.IsUndoEnabled <> value then x.node.IsUndoEnabled <- value
            )
        
        [<Extension>]
        static member UndoLimit(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.UndoLimit <> value then x.node.UndoLimit <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member BorderBrush(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.BorderBrush <> value then x.node.BorderBrush <- value
            )
        
        [<Extension>]
        static member BorderThickness(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.BorderThickness <> value then x.node.BorderThickness <- value
            )
        
        [<Extension>]
        static member CornerRadius(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.CornerRadius <> value then x.node.CornerRadius <- value
            )
        
        [<Extension>]
        static member FontFamily(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FontFamily <> value then x.node.FontFamily <- value
            )
        
        [<Extension>]
        static member FontSize(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FontSize <> value then x.node.FontSize <- value
            )
        
        [<Extension>]
        static member FontStyle(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FontStyle <> value then x.node.FontStyle <- value
            )
        
        [<Extension>]
        static member FontWeight(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FontWeight <> value then x.node.FontWeight <- value
            )
        
        [<Extension>]
        static member FontStretch(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FontStretch <> value then x.node.FontStretch <- value
            )
        
        [<Extension>]
        static member Foreground(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Foreground <> value then x.node.Foreground <- value
            )
        
        [<Extension>]
        static member Padding(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Padding <> value then x.node.Padding <- value
            )
        
        [<Extension>]
        static member Template(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Template <> value then x.node.Template <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.TextBox, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member CopyingToClipboard(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.CopyingToClipboard.Add(wrappedHandler))
        
        [<Extension>]
        static member CuttingToClipboard(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.CuttingToClipboard.Add(wrappedHandler))
        
        [<Extension>]
        static member PastingFromClipboard(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PastingFromClipboard.Add(wrappedHandler))
        
        [<Extension>]
        static member TextChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member TextChanging(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextChanging.Add(wrappedHandler))
        
        [<Extension>]
        static member TemplateApplied(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TemplateApplied.Add(wrappedHandler))
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.TextBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type ButtonExtensions =
    class
        // Properties

        
        [<Extension>]
        static member ClickMode(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.ClickMode <> value then x.node.ClickMode <- value
            )
        
        [<Extension>]
        static member Command(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Command <> value then x.node.Command <- value
            )
        
        [<Extension>]
        static member HotKey(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.HotKey <> value then x.node.HotKey <- value
            )
        
        [<Extension>]
        static member CommandParameter(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.CommandParameter <> value then x.node.CommandParameter <- value
            )
        
        [<Extension>]
        static member IsDefault(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.IsDefault <> value then x.node.IsDefault <- value
            )
        
        [<Extension>]
        static member IsCancel(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.IsCancel <> value then x.node.IsCancel <- value
            )
        
        [<Extension>]
        static member Flyout(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Flyout <> value then x.node.Flyout <- value
            )
        
        [<Extension>]
        static member Content(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Content <> value then x.node.Content <- value
            )
        
        [<Extension>]
        static member ContentTemplate(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.ContentTemplate <> value then x.node.ContentTemplate <- value
            )
        
        [<Extension>]
        static member HorizontalContentAlignment(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.HorizontalContentAlignment <> value then x.node.HorizontalContentAlignment <- value
            )
        
        [<Extension>]
        static member VerticalContentAlignment(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.VerticalContentAlignment <> value then x.node.VerticalContentAlignment <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member BorderBrush(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.BorderBrush <> value then x.node.BorderBrush <- value
            )
        
        [<Extension>]
        static member BorderThickness(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.BorderThickness <> value then x.node.BorderThickness <- value
            )
        
        [<Extension>]
        static member CornerRadius(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.CornerRadius <> value then x.node.CornerRadius <- value
            )
        
        [<Extension>]
        static member FontFamily(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FontFamily <> value then x.node.FontFamily <- value
            )
        
        [<Extension>]
        static member FontSize(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FontSize <> value then x.node.FontSize <- value
            )
        
        [<Extension>]
        static member FontStyle(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FontStyle <> value then x.node.FontStyle <- value
            )
        
        [<Extension>]
        static member FontWeight(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FontWeight <> value then x.node.FontWeight <- value
            )
        
        [<Extension>]
        static member FontStretch(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FontStretch <> value then x.node.FontStretch <- value
            )
        
        [<Extension>]
        static member Foreground(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Foreground <> value then x.node.Foreground <- value
            )
        
        [<Extension>]
        static member Padding(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Padding <> value then x.node.Padding <- value
            )
        
        [<Extension>]
        static member Template(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Template <> value then x.node.Template <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.Button, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member Click(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Click.Add(wrappedHandler))
        
        [<Extension>]
        static member TemplateApplied(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TemplateApplied.Add(wrappedHandler))
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.Button, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type CheckBoxExtensions =
    class
        // Properties

        
        [<Extension>]
        static member IsChecked(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsChecked <> value then x.node.IsChecked <- value
            )
        
        [<Extension>]
        static member IsThreeState(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsThreeState <> value then x.node.IsThreeState <- value
            )
        
        [<Extension>]
        static member ClickMode(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.ClickMode <> value then x.node.ClickMode <- value
            )
        
        [<Extension>]
        static member Command(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Command <> value then x.node.Command <- value
            )
        
        [<Extension>]
        static member HotKey(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.HotKey <> value then x.node.HotKey <- value
            )
        
        [<Extension>]
        static member CommandParameter(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.CommandParameter <> value then x.node.CommandParameter <- value
            )
        
        [<Extension>]
        static member IsDefault(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsDefault <> value then x.node.IsDefault <- value
            )
        
        [<Extension>]
        static member IsCancel(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsCancel <> value then x.node.IsCancel <- value
            )
        
        [<Extension>]
        static member Flyout(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Flyout <> value then x.node.Flyout <- value
            )
        
        [<Extension>]
        static member Content(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Content <> value then x.node.Content <- value
            )
        
        [<Extension>]
        static member ContentTemplate(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.ContentTemplate <> value then x.node.ContentTemplate <- value
            )
        
        [<Extension>]
        static member HorizontalContentAlignment(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.HorizontalContentAlignment <> value then x.node.HorizontalContentAlignment <- value
            )
        
        [<Extension>]
        static member VerticalContentAlignment(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.VerticalContentAlignment <> value then x.node.VerticalContentAlignment <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member BorderBrush(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.BorderBrush <> value then x.node.BorderBrush <- value
            )
        
        [<Extension>]
        static member BorderThickness(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.BorderThickness <> value then x.node.BorderThickness <- value
            )
        
        [<Extension>]
        static member CornerRadius(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.CornerRadius <> value then x.node.CornerRadius <- value
            )
        
        [<Extension>]
        static member FontFamily(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FontFamily <> value then x.node.FontFamily <- value
            )
        
        [<Extension>]
        static member FontSize(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FontSize <> value then x.node.FontSize <- value
            )
        
        [<Extension>]
        static member FontStyle(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FontStyle <> value then x.node.FontStyle <- value
            )
        
        [<Extension>]
        static member FontWeight(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FontWeight <> value then x.node.FontWeight <- value
            )
        
        [<Extension>]
        static member FontStretch(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FontStretch <> value then x.node.FontStretch <- value
            )
        
        [<Extension>]
        static member Foreground(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Foreground <> value then x.node.Foreground <- value
            )
        
        [<Extension>]
        static member Padding(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Padding <> value then x.node.Padding <- value
            )
        
        [<Extension>]
        static member Template(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Template <> value then x.node.Template <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.CheckBox, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member Checked(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Checked.Add(wrappedHandler))
        
        [<Extension>]
        static member Unchecked(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unchecked.Add(wrappedHandler))
        
        [<Extension>]
        static member Indeterminate(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Indeterminate.Add(wrappedHandler))
        
        [<Extension>]
        static member IsCheckedChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.IsCheckedChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Click(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Click.Add(wrappedHandler))
        
        [<Extension>]
        static member TemplateApplied(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TemplateApplied.Add(wrappedHandler))
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.CheckBox, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type GridExtensions =
    class
        // Properties

        
        [<Extension>]
        static member ShowGridLines(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.ShowGridLines <> value then x.node.ShowGridLines <- value
            )
        
        [<Extension>]
        static member ColumnDefinitions(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.ColumnDefinitions <> value then x.node.ColumnDefinitions <- value
            )
        
        [<Extension>]
        static member RowDefinitions(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.RowDefinitions <> value then x.node.RowDefinitions <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.Grid, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.Grid, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type DockPanelExtensions =
    class
        // Properties

        
        [<Extension>]
        static member LastChildFill(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.LastChildFill <> value then x.node.LastChildFill <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.DockPanel, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.DockPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type StackPanelExtensions =
    class
        // Properties

        
        [<Extension>]
        static member Spacing(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Spacing <> value then x.node.Spacing <- value
            )
        
        [<Extension>]
        static member Orientation(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Orientation <> value then x.node.Orientation <- value
            )
        
        [<Extension>]
        static member AreHorizontalSnapPointsRegular(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.AreHorizontalSnapPointsRegular <> value then x.node.AreHorizontalSnapPointsRegular <- value
            )
        
        [<Extension>]
        static member AreVerticalSnapPointsRegular(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.AreVerticalSnapPointsRegular <> value then x.node.AreVerticalSnapPointsRegular <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.StackPanel, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member HorizontalSnapPointsChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.HorizontalSnapPointsChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member VerticalSnapPointsChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.VerticalSnapPointsChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.StackPanel, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end

[<Extension>]
type ScrollViewerExtensions =
    class
        // Properties

        
        [<Extension>]
        static member BringIntoViewOnFocusChange(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.BringIntoViewOnFocusChange <> value then x.node.BringIntoViewOnFocusChange <- value
            )
        
        [<Extension>]
        static member Offset(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Offset <> value then x.node.Offset <- value
            )
        
        [<Extension>]
        static member HorizontalScrollBarVisibility(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.HorizontalScrollBarVisibility <> value then x.node.HorizontalScrollBarVisibility <- value
            )
        
        [<Extension>]
        static member VerticalScrollBarVisibility(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.VerticalScrollBarVisibility <> value then x.node.VerticalScrollBarVisibility <- value
            )
        
        [<Extension>]
        static member HorizontalSnapPointsType(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.HorizontalSnapPointsType <> value then x.node.HorizontalSnapPointsType <- value
            )
        
        [<Extension>]
        static member VerticalSnapPointsType(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.VerticalSnapPointsType <> value then x.node.VerticalSnapPointsType <- value
            )
        
        [<Extension>]
        static member HorizontalSnapPointsAlignment(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.HorizontalSnapPointsAlignment <> value then x.node.HorizontalSnapPointsAlignment <- value
            )
        
        [<Extension>]
        static member VerticalSnapPointsAlignment(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.VerticalSnapPointsAlignment <> value then x.node.VerticalSnapPointsAlignment <- value
            )
        
        [<Extension>]
        static member AllowAutoHide(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.AllowAutoHide <> value then x.node.AllowAutoHide <- value
            )
        
        [<Extension>]
        static member IsScrollChainingEnabled(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.IsScrollChainingEnabled <> value then x.node.IsScrollChainingEnabled <- value
            )
        
        [<Extension>]
        static member IsScrollInertiaEnabled(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.IsScrollInertiaEnabled <> value then x.node.IsScrollInertiaEnabled <- value
            )
        
        [<Extension>]
        static member Content(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Content <> value then x.node.Content <- value
            )
        
        [<Extension>]
        static member ContentTemplate(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.ContentTemplate <> value then x.node.ContentTemplate <- value
            )
        
        [<Extension>]
        static member HorizontalContentAlignment(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.HorizontalContentAlignment <> value then x.node.HorizontalContentAlignment <- value
            )
        
        [<Extension>]
        static member VerticalContentAlignment(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.VerticalContentAlignment <> value then x.node.VerticalContentAlignment <- value
            )
        
        [<Extension>]
        static member Background(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Background <> value then x.node.Background <- value
            )
        
        [<Extension>]
        static member BorderBrush(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.BorderBrush <> value then x.node.BorderBrush <- value
            )
        
        [<Extension>]
        static member BorderThickness(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.BorderThickness <> value then x.node.BorderThickness <- value
            )
        
        [<Extension>]
        static member CornerRadius(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.CornerRadius <> value then x.node.CornerRadius <- value
            )
        
        [<Extension>]
        static member FontFamily(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FontFamily <> value then x.node.FontFamily <- value
            )
        
        [<Extension>]
        static member FontSize(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FontSize <> value then x.node.FontSize <- value
            )
        
        [<Extension>]
        static member FontStyle(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FontStyle <> value then x.node.FontStyle <- value
            )
        
        [<Extension>]
        static member FontWeight(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FontWeight <> value then x.node.FontWeight <- value
            )
        
        [<Extension>]
        static member FontStretch(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FontStretch <> value then x.node.FontStretch <- value
            )
        
        [<Extension>]
        static member Foreground(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Foreground <> value then x.node.Foreground <- value
            )
        
        [<Extension>]
        static member Padding(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Padding <> value then x.node.Padding <- value
            )
        
        [<Extension>]
        static member Template(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Template <> value then x.node.Template <- value
            )
        
        [<Extension>]
        static member FocusAdorner(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FocusAdorner <> value then x.node.FocusAdorner <- value
            )
        
        [<Extension>]
        static member ContextMenu(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.ContextMenu <> value then x.node.ContextMenu <- value
            )
        
        [<Extension>]
        static member ContextFlyout(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.ContextFlyout <> value then x.node.ContextFlyout <- value
            )
        
        [<Extension>]
        static member Tag(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Tag <> value then x.node.Tag <- value
            )
        
        [<Extension>]
        static member Focusable(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Focusable <> value then x.node.Focusable <- value
            )
        
        [<Extension>]
        static member IsEnabled(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.IsEnabled <> value then x.node.IsEnabled <- value
            )
        
        [<Extension>]
        static member Cursor(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Cursor <> value then x.node.Cursor <- value
            )
        
        [<Extension>]
        static member IsHitTestVisible(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.IsHitTestVisible <> value then x.node.IsHitTestVisible <- value
            )
        
        [<Extension>]
        static member IsTabStop(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.IsTabStop <> value then x.node.IsTabStop <- value
            )
        
        [<Extension>]
        static member TabIndex(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.TabIndex <> value then x.node.TabIndex <- value
            )
        
        [<Extension>]
        static member Width(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Width <> value then x.node.Width <- value
            )
        
        [<Extension>]
        static member Height(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Height <> value then x.node.Height <- value
            )
        
        [<Extension>]
        static member MinWidth(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.MinWidth <> value then x.node.MinWidth <- value
            )
        
        [<Extension>]
        static member MaxWidth(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.MaxWidth <> value then x.node.MaxWidth <- value
            )
        
        [<Extension>]
        static member MinHeight(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.MinHeight <> value then x.node.MinHeight <- value
            )
        
        [<Extension>]
        static member MaxHeight(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.MaxHeight <> value then x.node.MaxHeight <- value
            )
        
        [<Extension>]
        static member Margin(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Margin <> value then x.node.Margin <- value
            )
        
        [<Extension>]
        static member HorizontalAlignment(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.HorizontalAlignment <> value then x.node.HorizontalAlignment <- value
            )
        
        [<Extension>]
        static member VerticalAlignment(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.VerticalAlignment <> value then x.node.VerticalAlignment <- value
            )
        
        [<Extension>]
        static member UseLayoutRounding(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.UseLayoutRounding <> value then x.node.UseLayoutRounding <- value
            )
        
        [<Extension>]
        static member ClipToBounds(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.ClipToBounds <> value then x.node.ClipToBounds <- value
            )
        
        [<Extension>]
        static member Clip(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Clip <> value then x.node.Clip <- value
            )
        
        [<Extension>]
        static member IsVisible(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.IsVisible <> value then x.node.IsVisible <- value
            )
        
        [<Extension>]
        static member Opacity(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Opacity <> value then x.node.Opacity <- value
            )
        
        [<Extension>]
        static member OpacityMask(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.OpacityMask <> value then x.node.OpacityMask <- value
            )
        
        [<Extension>]
        static member Effect(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Effect <> value then x.node.Effect <- value
            )
        
        [<Extension>]
        static member RenderTransform(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.RenderTransform <> value then x.node.RenderTransform <- value
            )
        
        [<Extension>]
        static member RenderTransformOrigin(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.RenderTransformOrigin <> value then x.node.RenderTransformOrigin <- value
            )
        
        [<Extension>]
        static member FlowDirection(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.FlowDirection <> value then x.node.FlowDirection <- value
            )
        
        [<Extension>]
        static member ZIndex(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.ZIndex <> value then x.node.ZIndex <- value
            )
        
        [<Extension>]
        static member Name(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Name <> value then x.node.Name <- value
            )
        
        [<Extension>]
        static member DataContext(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.DataContext <> value then x.node.DataContext <- value
            )
        
        [<Extension>]
        static member Resources(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Resources <> value then x.node.Resources <- value
            )
        
        [<Extension>]
        static member Theme(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Theme <> value then x.node.Theme <- value
            )
        
        [<Extension>]
        static member Transitions(this: #ControlBuilders.ScrollViewer, value) =
            this.onEval(fun x -> if x.node.Transitions <> value then x.node.Transitions <- value
            )
        
    
        // Events
        
        
        [<Extension>]
        static member ScrollChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ScrollChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member TemplateApplied(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TemplateApplied.Add(wrappedHandler))
        
        [<Extension>]
        static member ContextRequested(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ContextRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member Loaded(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Loaded.Add(wrappedHandler))
        
        [<Extension>]
        static member Unloaded(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Unloaded.Add(wrappedHandler))
        
        [<Extension>]
        static member SizeChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.SizeChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member GotFocus(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.GotFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member LostFocus(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LostFocus.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyDown(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyDown.Add(wrappedHandler))
        
        [<Extension>]
        static member KeyUp(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.KeyUp.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInput(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInput.Add(wrappedHandler))
        
        [<Extension>]
        static member TextInputMethodClientRequested(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.TextInputMethodClientRequested.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerEntered(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerEntered.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerExited(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerExited.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerMoved(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerMoved.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerPressed(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerPressed.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerReleased(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerReleased.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerCaptureLost(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerCaptureLost.Add(wrappedHandler))
        
        [<Extension>]
        static member PointerWheelChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PointerWheelChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Tapped(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Tapped.Add(wrappedHandler))
        
        [<Extension>]
        static member Holding(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Holding.Add(wrappedHandler))
        
        [<Extension>]
        static member DoubleTapped(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DoubleTapped.Add(wrappedHandler))
        
        [<Extension>]
        static member EffectiveViewportChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.EffectiveViewportChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member LayoutUpdated(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.LayoutUpdated.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToVisualTree(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromVisualTree(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromVisualTree.Add(wrappedHandler))
        
        [<Extension>]
        static member AttachedToLogicalTree(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.AttachedToLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DetachedFromLogicalTree(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DetachedFromLogicalTree.Add(wrappedHandler))
        
        [<Extension>]
        static member DataContextChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.DataContextChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member Initialized(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.Initialized.Add(wrappedHandler))
        
        [<Extension>]
        static member ResourcesChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ResourcesChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member ActualThemeVariantChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.ActualThemeVariantChanged.Add(wrappedHandler))
        
        [<Extension>]
        static member PropertyChanged(this: #ControlBuilders.ScrollViewer, handler) =
            this.onInit(fun x ->
                let wrappedHandler = Event.handle x.node x.host handler
                x.node.PropertyChanged.Add(wrappedHandler))
        
    end


// // [<Extension>]
// // type TextBlockExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member Text(this: #ControlBuilders.TextBlock, value) =
// //             this.onEval(fun x -> if x.node.Text <> value then x.node.Text <- value)
        
// //         [<Extension>]
// //         static member TextTrimming(this: #ControlBuilders.TextBlock, value) =
// //             this.onEval(fun x -> if x.node.TextTrimming <> value then x.node.TextTrimming <- value)
    
// //         // Events
// //     end

// // [<Extension>]
// // type TextBoxExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member Text(this: #ControlBuilders.TextBox, value) =
// //             this.onEval(fun x -> if x.node.Text <> value then x.node.Text <- value
// //             )
    
// //         // Events
    
// //         [<Extension>]
// //         static member TextChanged(this: #ControlBuilders.TextBox, handler) =
// //             this.onInit(fun x ->
// //                 let wrappedHandler = Event.handle x.node x.host handler
// //                 x.node.TextChanged.Add(wrappedHandler))
// //                 //x.node.AddHandler(Avalonia.Controls.TextBox.TextChangedEvent,)

// //     end

// // [<Extension>]
// // type ButtonExtensions =
// //     class
// //         // Properties
       
// //         // Events
    
// //         [<Extension>]
// //         static member Click(this: #ControlBuilders.Button, handler) =
// //             this.onInit(fun x ->
// //                 let wrappedHandler = Event.handle x.node x.host handler
// //                 x.node.Click.Add(wrappedHandler))
// //     end
        
// // [<Extension>]
// // type CheckBoxExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member IsChecked(this: #ControlBuilders.CheckBox, value) =
// //             this.onEval(fun x -> if x.node.IsChecked <> value then x.node.IsChecked <- value)
    
// //         // Events
    
// //         [<Extension>]
// //         static member IsCheckedChanged(this: #ControlBuilders.CheckBox, handler) =
// //             this.onInit(fun x ->
// //                 let wrappedHandler = Event.handle x.node x.host handler
// //                 x.node.IsCheckedChanged.Add(wrappedHandler))
// //     end

// // [<Extension>]
// // type ScrollViewerExtensions =
// //     class
// //         // Properties
        
// //         // Events
// //     end
        
// // [<Extension>]
// // type StackPanelExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member Orientation(this: #ControlBuilders.StackPanel, value) =
// //             this.onEval(fun x -> if x.node.Orientation <> value then x.node.Orientation <- value)
    
// //         // Events
// //     end

// // [<Extension>]
// // type DockPanelExtensions =
// //     class
// //         // Properties
        
// //         [<Extension>]
// //         static member LastChildFill(this: #ControlBuilders.DockPanel, value) =
// //             this.onEval(fun x -> if x.node.LastChildFill <> value then x.node.LastChildFill <- value)
    
// //         // Events
// //     end

// -------------------------------


module AttachedProperties =
    
    type TextBlock<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    
    type Grid<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    
    type DockPanel<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    
    type ScrollViewer<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    


[<Extension>]
type TextBlockAttachedProperties =
    class
        // Entry

        [<Extension>]
        static member inline TextBlock(this: #NodeBuilder<_,AvaloniaContext>)  =
            { AttachedProperties.TextBlock.target = this }

        // Properties

        
        [<Extension>]
        static member inline BaselineOffset(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetBaselineOffset(x.node, value))
        
        [<Extension>]
        static member inline LineHeight(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetLineHeight(x.node, value))
        
        [<Extension>]
        static member inline LetterSpacing(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetLetterSpacing(x.node, value))
        
        [<Extension>]
        static member inline MaxLines(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetMaxLines(x.node, value))
        
        [<Extension>]
        static member inline TextAlignment(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetTextAlignment(x.node, value))
        
        [<Extension>]
        static member inline TextWrapping(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetTextWrapping(x.node, value))
        
        [<Extension>]
        static member inline TextTrimming(this: AttachedProperties.TextBlock<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.TextBlock.SetTextTrimming(x.node, value))
        

    end

[<Extension>]
type GridAttachedProperties =
    class
        // Entry

        [<Extension>]
        static member inline Grid(this: #NodeBuilder<_,AvaloniaContext>)  =
            { AttachedProperties.Grid.target = this }

        // Properties

        
        [<Extension>]
        static member inline Column(this: AttachedProperties.Grid<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.Grid.SetColumn(x.node, value))
        
        [<Extension>]
        static member inline Row(this: AttachedProperties.Grid<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.Grid.SetRow(x.node, value))
        
        [<Extension>]
        static member inline ColumnSpan(this: AttachedProperties.Grid<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.Grid.SetColumnSpan(x.node, value))
        
        [<Extension>]
        static member inline RowSpan(this: AttachedProperties.Grid<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.Grid.SetRowSpan(x.node, value))
        
        [<Extension>]
        static member inline IsSharedSizeScope(this: AttachedProperties.Grid<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.Grid.SetIsSharedSizeScope(x.node, value))
        

    end

[<Extension>]
type DockPanelAttachedProperties =
    class
        // Entry

        [<Extension>]
        static member inline DockPanel(this: #NodeBuilder<_,AvaloniaContext>)  =
            { AttachedProperties.DockPanel.target = this }

        // Properties

        
        [<Extension>]
        static member inline Dock(this: AttachedProperties.DockPanel<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.DockPanel.SetDock(x.node, value))
        

    end

[<Extension>]
type ScrollViewerAttachedProperties =
    class
        // Entry

        [<Extension>]
        static member inline ScrollViewer(this: #NodeBuilder<_,AvaloniaContext>)  =
            { AttachedProperties.ScrollViewer.target = this }

        // Properties

        
        [<Extension>]
        static member inline BringIntoViewOnFocusChange(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetBringIntoViewOnFocusChange(x.node, value))
        
        [<Extension>]
        static member inline HorizontalScrollBarVisibility(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(x.node, value))
        
        [<Extension>]
        static member inline HorizontalSnapPointsType(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetHorizontalSnapPointsType(x.node, value))
        
        [<Extension>]
        static member inline VerticalSnapPointsType(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetVerticalSnapPointsType(x.node, value))
        
        [<Extension>]
        static member inline HorizontalSnapPointsAlignment(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetHorizontalSnapPointsAlignment(x.node, value))
        
        [<Extension>]
        static member inline VerticalSnapPointsAlignment(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetVerticalSnapPointsAlignment(x.node, value))
        
        [<Extension>]
        static member inline VerticalScrollBarVisibility(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetVerticalScrollBarVisibility(x.node, value))
        
        [<Extension>]
        static member inline AllowAutoHide(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetAllowAutoHide(x.node, value))
        
        [<Extension>]
        static member inline IsScrollChainingEnabled(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetIsScrollChainingEnabled(x.node, value))
        
        [<Extension>]
        static member inline IsScrollInertiaEnabled(this: AttachedProperties.ScrollViewer<_,_>, value) =
            this.target.onEval(fun x -> Avalonia.Controls.ScrollViewer.SetIsScrollInertiaEnabled(x.node, value))
        

    end



// -------------------------------


type Controls =

    static member TextBlock = ControlBuilders.TextBlock()

    static member TextBox = ControlBuilders.TextBox()

    static member Button = ControlBuilders.Button()

    static member CheckBox = ControlBuilders.CheckBox()

    static member Grid = ControlBuilders.Grid()

    static member DockPanel = ControlBuilders.DockPanel()

    static member StackPanel = ControlBuilders.StackPanel()

    static member ScrollViewer = ControlBuilders.ScrollViewer()



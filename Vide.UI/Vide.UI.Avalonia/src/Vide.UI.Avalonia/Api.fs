

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vide.UI.Avalonia

open System
open System.Runtime.CompilerServices
open Vide


type AvaloniaControl = Avalonia.Controls.Control


type Controls = class end


type BorderBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.Border>()
type Controls with static member Border = BorderBuilder()

type ButtonBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.Button>()
type Controls with static member Button = ButtonBuilder()

type CanvasBuilder () = inherit PanelRetBuilder<Avalonia.Controls.Canvas>()
type Controls with static member Canvas = CanvasBuilder()

type CheckBoxBuilder () = inherit ContentLeafPotBuilder<System.Nullable<System.Boolean>, Avalonia.Controls.CheckBox>(fun node -> node.IsChecked)
type Controls with static member CheckBox = CheckBoxBuilder()

type ComboBoxBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.ComboBox>()
type Controls with static member ComboBox = ComboBoxBuilder()

type ContentControlBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.ContentControl>()
type Controls with static member ContentControl = ContentControlBuilder()

type ControlBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.Control>()
type Controls with static member Control = ControlBuilder()

type DatePickerBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.DatePicker>()
type Controls with static member DatePicker = DatePickerBuilder()

type TimePickerBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.TimePicker>()
type Controls with static member TimePicker = TimePickerBuilder()

type DockPanelBuilder () = inherit PanelRetBuilder<Avalonia.Controls.DockPanel>()
type Controls with static member DockPanel = DockPanelBuilder()

type ExpanderBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.Expander>()
type Controls with static member Expander = ExpanderBuilder()

type GridBuilder () = inherit PanelRetBuilder<Avalonia.Controls.Grid>()
type Controls with static member Grid = GridBuilder()

type LabelBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.Label>()
type Controls with static member Label = LabelBuilder()

type StackPanelBuilder () = inherit PanelRetBuilder<Avalonia.Controls.StackPanel>()
type Controls with static member StackPanel = StackPanelBuilder()

type TextBlockBuilder () = inherit ContentLeafRetBuilder<Avalonia.Controls.TextBlock>()
type Controls with static member TextBlock = TextBlockBuilder()

type TextBoxBuilder () = inherit ContentLeafPotBuilder<System.String, Avalonia.Controls.TextBox>(fun node -> node.Text)
type Controls with static member TextBox = TextBoxBuilder()

type WrapPanelBuilder () = inherit PanelRetBuilder<Avalonia.Controls.WrapPanel>()
type Controls with static member WrapPanel = WrapPanelBuilder()



[<Extension>]
type PropertiesExtensions =
    
    [<Extension>]
    static member inline AcceptsReturn<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_AcceptsReturn: unit -> System.Boolean)
            and 'e : (member set_AcceptsReturn: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_AcceptsReturn() <> value then x.node.set_AcceptsReturn(value))
    
    [<Extension>]
    static member inline AcceptsTab<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_AcceptsTab: unit -> System.Boolean)
            and 'e : (member set_AcceptsTab: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_AcceptsTab() <> value then x.node.set_AcceptsTab(value))
    
    [<Extension>]
    static member inline AreHorizontalSnapPointsRegular<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_AreHorizontalSnapPointsRegular: unit -> System.Boolean)
            and 'e : (member set_AreHorizontalSnapPointsRegular: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_AreHorizontalSnapPointsRegular() <> value then x.node.set_AreHorizontalSnapPointsRegular(value))
    
    [<Extension>]
    static member inline AreVerticalSnapPointsRegular<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_AreVerticalSnapPointsRegular: unit -> System.Boolean)
            and 'e : (member set_AreVerticalSnapPointsRegular: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_AreVerticalSnapPointsRegular() <> value then x.node.set_AreVerticalSnapPointsRegular(value))
    
    [<Extension>]
    static member inline AutoScrollToSelectedItem<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_AutoScrollToSelectedItem: unit -> System.Boolean)
            and 'e : (member set_AutoScrollToSelectedItem: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_AutoScrollToSelectedItem() <> value then x.node.set_AutoScrollToSelectedItem(value))
    
    [<Extension>]
    static member inline Background<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Background: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_Background: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_Background() <> value then x.node.set_Background(value))
    
    [<Extension>]
    static member inline BaselineOffset<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_BaselineOffset: unit -> System.Double)
            and 'e : (member set_BaselineOffset: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_BaselineOffset() <> value then x.node.set_BaselineOffset(value))
    
    [<Extension>]
    static member inline BorderBrush<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_BorderBrush: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_BorderBrush: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_BorderBrush() <> value then x.node.set_BorderBrush(value))
    
    [<Extension>]
    static member inline BorderThickness<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_BorderThickness: unit -> Avalonia.Thickness)
            and 'e : (member set_BorderThickness: Avalonia.Thickness -> unit)
        >
        (this: 'nb, value: Avalonia.Thickness) =
            this.onEval(fun x -> if x.node.get_BorderThickness() <> value then x.node.set_BorderThickness(value))
    
    [<Extension>]
    static member inline BoxShadow<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_BoxShadow: unit -> Avalonia.Media.BoxShadows)
            and 'e : (member set_BoxShadow: Avalonia.Media.BoxShadows -> unit)
        >
        (this: 'nb, value: Avalonia.Media.BoxShadows) =
            this.onEval(fun x -> if x.node.get_BoxShadow() <> value then x.node.set_BoxShadow(value))
    
    [<Extension>]
    static member inline CaretBrush<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_CaretBrush: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_CaretBrush: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_CaretBrush() <> value then x.node.set_CaretBrush(value))
    
    [<Extension>]
    static member inline CaretIndex<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_CaretIndex: unit -> System.Int32)
            and 'e : (member set_CaretIndex: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_CaretIndex() <> value then x.node.set_CaretIndex(value))
    
    [<Extension>]
    static member inline Child<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Child: unit -> Avalonia.Controls.Control)
            and 'e : (member set_Child: Avalonia.Controls.Control -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Control) =
            this.onEval(fun x -> if x.node.get_Child() <> value then x.node.set_Child(value))
    
    [<Extension>]
    static member inline ClickMode<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ClickMode: unit -> Avalonia.Controls.ClickMode)
            and 'e : (member set_ClickMode: Avalonia.Controls.ClickMode -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.ClickMode) =
            this.onEval(fun x -> if x.node.get_ClickMode() <> value then x.node.set_ClickMode(value))
    
    [<Extension>]
    static member inline Clip<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Clip: unit -> Avalonia.Media.Geometry)
            and 'e : (member set_Clip: Avalonia.Media.Geometry -> unit)
        >
        (this: 'nb, value: Avalonia.Media.Geometry) =
            this.onEval(fun x -> if x.node.get_Clip() <> value then x.node.set_Clip(value))
    
    [<Extension>]
    static member inline ClipToBounds<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ClipToBounds: unit -> System.Boolean)
            and 'e : (member set_ClipToBounds: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_ClipToBounds() <> value then x.node.set_ClipToBounds(value))
    
    [<Extension>]
    static member inline ClockIdentifier<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ClockIdentifier: unit -> System.String)
            and 'e : (member set_ClockIdentifier: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_ClockIdentifier() <> value then x.node.set_ClockIdentifier(value))
    
    [<Extension>]
    static member inline ColumnDefinitions<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ColumnDefinitions: unit -> Avalonia.Controls.ColumnDefinitions)
            and 'e : (member set_ColumnDefinitions: Avalonia.Controls.ColumnDefinitions -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.ColumnDefinitions) =
            this.onEval(fun x -> if x.node.get_ColumnDefinitions() <> value then x.node.set_ColumnDefinitions(value))
    
    [<Extension>]
    static member inline Command<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Command: unit -> System.Windows.Input.ICommand)
            and 'e : (member set_Command: System.Windows.Input.ICommand -> unit)
        >
        (this: 'nb, value: System.Windows.Input.ICommand) =
            this.onEval(fun x -> if x.node.get_Command() <> value then x.node.set_Command(value))
    
    [<Extension>]
    static member inline CommandParameter<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_CommandParameter: unit -> System.Object)
            and 'e : (member set_CommandParameter: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_CommandParameter() <> value then x.node.set_CommandParameter(value))
    
    [<Extension>]
    static member inline Content<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Content: unit -> System.Object)
            and 'e : (member set_Content: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_Content() <> value then x.node.set_Content(value))
    
    [<Extension>]
    static member inline ContentTemplate<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ContentTemplate: unit -> Avalonia.Controls.Templates.IDataTemplate)
            and 'e : (member set_ContentTemplate: Avalonia.Controls.Templates.IDataTemplate -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Templates.IDataTemplate) =
            this.onEval(fun x -> if x.node.get_ContentTemplate() <> value then x.node.set_ContentTemplate(value))
    
    [<Extension>]
    static member inline ContentTransition<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ContentTransition: unit -> Avalonia.Animation.IPageTransition)
            and 'e : (member set_ContentTransition: Avalonia.Animation.IPageTransition -> unit)
        >
        (this: 'nb, value: Avalonia.Animation.IPageTransition) =
            this.onEval(fun x -> if x.node.get_ContentTransition() <> value then x.node.set_ContentTransition(value))
    
    [<Extension>]
    static member inline ContextFlyout<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ContextFlyout: unit -> Avalonia.Controls.Primitives.FlyoutBase)
            and 'e : (member set_ContextFlyout: Avalonia.Controls.Primitives.FlyoutBase -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Primitives.FlyoutBase) =
            this.onEval(fun x -> if x.node.get_ContextFlyout() <> value then x.node.set_ContextFlyout(value))
    
    [<Extension>]
    static member inline ContextMenu<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ContextMenu: unit -> Avalonia.Controls.ContextMenu)
            and 'e : (member set_ContextMenu: Avalonia.Controls.ContextMenu -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.ContextMenu) =
            this.onEval(fun x -> if x.node.get_ContextMenu() <> value then x.node.set_ContextMenu(value))
    
    [<Extension>]
    static member inline CornerRadius<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_CornerRadius: unit -> Avalonia.CornerRadius)
            and 'e : (member set_CornerRadius: Avalonia.CornerRadius -> unit)
        >
        (this: 'nb, value: Avalonia.CornerRadius) =
            this.onEval(fun x -> if x.node.get_CornerRadius() <> value then x.node.set_CornerRadius(value))
    
    [<Extension>]
    static member inline Cursor<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Cursor: unit -> Avalonia.Input.Cursor)
            and 'e : (member set_Cursor: Avalonia.Input.Cursor -> unit)
        >
        (this: 'nb, value: Avalonia.Input.Cursor) =
            this.onEval(fun x -> if x.node.get_Cursor() <> value then x.node.set_Cursor(value))
    
    [<Extension>]
    static member inline DataContext<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_DataContext: unit -> System.Object)
            and 'e : (member set_DataContext: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_DataContext() <> value then x.node.set_DataContext(value))
    
    [<Extension>]
    static member inline DayFormat<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_DayFormat: unit -> System.String)
            and 'e : (member set_DayFormat: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_DayFormat() <> value then x.node.set_DayFormat(value))
    
    [<Extension>]
    static member inline DayVisible<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_DayVisible: unit -> System.Boolean)
            and 'e : (member set_DayVisible: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_DayVisible() <> value then x.node.set_DayVisible(value))
    
    [<Extension>]
    static member inline DisplayMemberBinding<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_DisplayMemberBinding: unit -> Avalonia.Data.IBinding)
            and 'e : (member set_DisplayMemberBinding: Avalonia.Data.IBinding -> unit)
        >
        (this: 'nb, value: Avalonia.Data.IBinding) =
            this.onEval(fun x -> if x.node.get_DisplayMemberBinding() <> value then x.node.set_DisplayMemberBinding(value))
    
    [<Extension>]
    static member inline Effect<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Effect: unit -> Avalonia.Media.IEffect)
            and 'e : (member set_Effect: Avalonia.Media.IEffect -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IEffect) =
            this.onEval(fun x -> if x.node.get_Effect() <> value then x.node.set_Effect(value))
    
    [<Extension>]
    static member inline ExpandDirection<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ExpandDirection: unit -> Avalonia.Controls.ExpandDirection)
            and 'e : (member set_ExpandDirection: Avalonia.Controls.ExpandDirection -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.ExpandDirection) =
            this.onEval(fun x -> if x.node.get_ExpandDirection() <> value then x.node.set_ExpandDirection(value))
    
    [<Extension>]
    static member inline FlowDirection<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FlowDirection: unit -> Avalonia.Media.FlowDirection)
            and 'e : (member set_FlowDirection: Avalonia.Media.FlowDirection -> unit)
        >
        (this: 'nb, value: Avalonia.Media.FlowDirection) =
            this.onEval(fun x -> if x.node.get_FlowDirection() <> value then x.node.set_FlowDirection(value))
    
    [<Extension>]
    static member inline Flyout<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Flyout: unit -> Avalonia.Controls.Primitives.FlyoutBase)
            and 'e : (member set_Flyout: Avalonia.Controls.Primitives.FlyoutBase -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Primitives.FlyoutBase) =
            this.onEval(fun x -> if x.node.get_Flyout() <> value then x.node.set_Flyout(value))
    
    [<Extension>]
    static member inline FocusAdorner<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FocusAdorner: unit -> Avalonia.Controls.ITemplate<Avalonia.Controls.Control>)
            and 'e : (member set_FocusAdorner: Avalonia.Controls.ITemplate<Avalonia.Controls.Control> -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.ITemplate<Avalonia.Controls.Control>) =
            this.onEval(fun x -> if x.node.get_FocusAdorner() <> value then x.node.set_FocusAdorner(value))
    
    [<Extension>]
    static member inline Focusable<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Focusable: unit -> System.Boolean)
            and 'e : (member set_Focusable: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_Focusable() <> value then x.node.set_Focusable(value))
    
    [<Extension>]
    static member inline FontFamily<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FontFamily: unit -> Avalonia.Media.FontFamily)
            and 'e : (member set_FontFamily: Avalonia.Media.FontFamily -> unit)
        >
        (this: 'nb, value: Avalonia.Media.FontFamily) =
            this.onEval(fun x -> if x.node.get_FontFamily() <> value then x.node.set_FontFamily(value))
    
    [<Extension>]
    static member inline FontSize<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FontSize: unit -> System.Double)
            and 'e : (member set_FontSize: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_FontSize() <> value then x.node.set_FontSize(value))
    
    [<Extension>]
    static member inline FontStretch<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FontStretch: unit -> Avalonia.Media.FontStretch)
            and 'e : (member set_FontStretch: Avalonia.Media.FontStretch -> unit)
        >
        (this: 'nb, value: Avalonia.Media.FontStretch) =
            this.onEval(fun x -> if x.node.get_FontStretch() <> value then x.node.set_FontStretch(value))
    
    [<Extension>]
    static member inline FontStyle<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FontStyle: unit -> Avalonia.Media.FontStyle)
            and 'e : (member set_FontStyle: Avalonia.Media.FontStyle -> unit)
        >
        (this: 'nb, value: Avalonia.Media.FontStyle) =
            this.onEval(fun x -> if x.node.get_FontStyle() <> value then x.node.set_FontStyle(value))
    
    [<Extension>]
    static member inline FontWeight<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_FontWeight: unit -> Avalonia.Media.FontWeight)
            and 'e : (member set_FontWeight: Avalonia.Media.FontWeight -> unit)
        >
        (this: 'nb, value: Avalonia.Media.FontWeight) =
            this.onEval(fun x -> if x.node.get_FontWeight() <> value then x.node.set_FontWeight(value))
    
    [<Extension>]
    static member inline Foreground<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Foreground: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_Foreground: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_Foreground() <> value then x.node.set_Foreground(value))
    
    [<Extension>]
    static member inline Header<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Header: unit -> System.Object)
            and 'e : (member set_Header: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_Header() <> value then x.node.set_Header(value))
    
    [<Extension>]
    static member inline HeaderTemplate<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_HeaderTemplate: unit -> Avalonia.Controls.Templates.IDataTemplate)
            and 'e : (member set_HeaderTemplate: Avalonia.Controls.Templates.IDataTemplate -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Templates.IDataTemplate) =
            this.onEval(fun x -> if x.node.get_HeaderTemplate() <> value then x.node.set_HeaderTemplate(value))
    
    [<Extension>]
    static member inline Height<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Height: unit -> System.Double)
            and 'e : (member set_Height: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_Height() <> value then x.node.set_Height(value))
    
    [<Extension>]
    static member inline HorizontalAlignment<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_HorizontalAlignment: unit -> Avalonia.Layout.HorizontalAlignment)
            and 'e : (member set_HorizontalAlignment: Avalonia.Layout.HorizontalAlignment -> unit)
        >
        (this: 'nb, value: Avalonia.Layout.HorizontalAlignment) =
            this.onEval(fun x -> if x.node.get_HorizontalAlignment() <> value then x.node.set_HorizontalAlignment(value))
    
    [<Extension>]
    static member inline HorizontalContentAlignment<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_HorizontalContentAlignment: unit -> Avalonia.Layout.HorizontalAlignment)
            and 'e : (member set_HorizontalContentAlignment: Avalonia.Layout.HorizontalAlignment -> unit)
        >
        (this: 'nb, value: Avalonia.Layout.HorizontalAlignment) =
            this.onEval(fun x -> if x.node.get_HorizontalContentAlignment() <> value then x.node.set_HorizontalContentAlignment(value))
    
    [<Extension>]
    static member inline HotKey<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_HotKey: unit -> Avalonia.Input.KeyGesture)
            and 'e : (member set_HotKey: Avalonia.Input.KeyGesture -> unit)
        >
        (this: 'nb, value: Avalonia.Input.KeyGesture) =
            this.onEval(fun x -> if x.node.get_HotKey() <> value then x.node.set_HotKey(value))
    
    [<Extension>]
    static member inline Inlines<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Inlines: unit -> Avalonia.Controls.Documents.InlineCollection)
            and 'e : (member set_Inlines: Avalonia.Controls.Documents.InlineCollection -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Documents.InlineCollection) =
            this.onEval(fun x -> if x.node.get_Inlines() <> value then x.node.set_Inlines(value))
    
    [<Extension>]
    static member inline InnerLeftContent<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_InnerLeftContent: unit -> System.Object)
            and 'e : (member set_InnerLeftContent: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_InnerLeftContent() <> value then x.node.set_InnerLeftContent(value))
    
    [<Extension>]
    static member inline InnerRightContent<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_InnerRightContent: unit -> System.Object)
            and 'e : (member set_InnerRightContent: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_InnerRightContent() <> value then x.node.set_InnerRightContent(value))
    
    [<Extension>]
    static member inline IsCancel<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsCancel: unit -> System.Boolean)
            and 'e : (member set_IsCancel: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsCancel() <> value then x.node.set_IsCancel(value))
    
    [<Extension>]
    static member inline IsChecked<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsChecked: unit -> System.Nullable<System.Boolean>)
            and 'e : (member set_IsChecked: System.Nullable<System.Boolean> -> unit)
        >
        (this: 'nb, value: System.Nullable<System.Boolean>) =
            this.onEval(fun x -> if x.node.get_IsChecked() <> value then x.node.set_IsChecked(value))
    
    [<Extension>]
    static member inline IsDefault<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsDefault: unit -> System.Boolean)
            and 'e : (member set_IsDefault: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsDefault() <> value then x.node.set_IsDefault(value))
    
    [<Extension>]
    static member inline IsDropDownOpen<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsDropDownOpen: unit -> System.Boolean)
            and 'e : (member set_IsDropDownOpen: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsDropDownOpen() <> value then x.node.set_IsDropDownOpen(value))
    
    [<Extension>]
    static member inline IsEnabled<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsEnabled: unit -> System.Boolean)
            and 'e : (member set_IsEnabled: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsEnabled() <> value then x.node.set_IsEnabled(value))
    
    [<Extension>]
    static member inline IsExpanded<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsExpanded: unit -> System.Boolean)
            and 'e : (member set_IsExpanded: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsExpanded() <> value then x.node.set_IsExpanded(value))
    
    [<Extension>]
    static member inline IsHitTestVisible<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsHitTestVisible: unit -> System.Boolean)
            and 'e : (member set_IsHitTestVisible: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsHitTestVisible() <> value then x.node.set_IsHitTestVisible(value))
    
    [<Extension>]
    static member inline IsReadOnly<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsReadOnly: unit -> System.Boolean)
            and 'e : (member set_IsReadOnly: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsReadOnly() <> value then x.node.set_IsReadOnly(value))
    
    [<Extension>]
    static member inline IsTabStop<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsTabStop: unit -> System.Boolean)
            and 'e : (member set_IsTabStop: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsTabStop() <> value then x.node.set_IsTabStop(value))
    
    [<Extension>]
    static member inline IsTextSearchEnabled<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsTextSearchEnabled: unit -> System.Boolean)
            and 'e : (member set_IsTextSearchEnabled: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsTextSearchEnabled() <> value then x.node.set_IsTextSearchEnabled(value))
    
    [<Extension>]
    static member inline IsThreeState<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsThreeState: unit -> System.Boolean)
            and 'e : (member set_IsThreeState: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsThreeState() <> value then x.node.set_IsThreeState(value))
    
    [<Extension>]
    static member inline IsUndoEnabled<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsUndoEnabled: unit -> System.Boolean)
            and 'e : (member set_IsUndoEnabled: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsUndoEnabled() <> value then x.node.set_IsUndoEnabled(value))
    
    [<Extension>]
    static member inline IsVisible<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_IsVisible: unit -> System.Boolean)
            and 'e : (member set_IsVisible: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_IsVisible() <> value then x.node.set_IsVisible(value))
    
    [<Extension>]
    static member inline ItemContainerTheme<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ItemContainerTheme: unit -> Avalonia.Styling.ControlTheme)
            and 'e : (member set_ItemContainerTheme: Avalonia.Styling.ControlTheme -> unit)
        >
        (this: 'nb, value: Avalonia.Styling.ControlTheme) =
            this.onEval(fun x -> if x.node.get_ItemContainerTheme() <> value then x.node.set_ItemContainerTheme(value))
    
    [<Extension>]
    static member inline ItemHeight<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ItemHeight: unit -> System.Double)
            and 'e : (member set_ItemHeight: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_ItemHeight() <> value then x.node.set_ItemHeight(value))
    
    [<Extension>]
    static member inline ItemTemplate<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ItemTemplate: unit -> Avalonia.Controls.Templates.IDataTemplate)
            and 'e : (member set_ItemTemplate: Avalonia.Controls.Templates.IDataTemplate -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Templates.IDataTemplate) =
            this.onEval(fun x -> if x.node.get_ItemTemplate() <> value then x.node.set_ItemTemplate(value))
    
    [<Extension>]
    static member inline ItemWidth<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ItemWidth: unit -> System.Double)
            and 'e : (member set_ItemWidth: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_ItemWidth() <> value then x.node.set_ItemWidth(value))
    
    [<Extension>]
    static member inline ItemsPanel<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ItemsPanel: unit -> Avalonia.Controls.ITemplate<Avalonia.Controls.Panel>)
            and 'e : (member set_ItemsPanel: Avalonia.Controls.ITemplate<Avalonia.Controls.Panel> -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.ITemplate<Avalonia.Controls.Panel>) =
            this.onEval(fun x -> if x.node.get_ItemsPanel() <> value then x.node.set_ItemsPanel(value))
    
    [<Extension>]
    static member inline ItemsSource<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ItemsSource: unit -> System.Collections.IEnumerable)
            and 'e : (member set_ItemsSource: System.Collections.IEnumerable -> unit)
        >
        (this: 'nb, value: System.Collections.IEnumerable) =
            this.onEval(fun x -> if x.node.get_ItemsSource() <> value then x.node.set_ItemsSource(value))
    
    [<Extension>]
    static member inline LastChildFill<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_LastChildFill: unit -> System.Boolean)
            and 'e : (member set_LastChildFill: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_LastChildFill() <> value then x.node.set_LastChildFill(value))
    
    [<Extension>]
    static member inline LetterSpacing<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_LetterSpacing: unit -> System.Double)
            and 'e : (member set_LetterSpacing: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_LetterSpacing() <> value then x.node.set_LetterSpacing(value))
    
    [<Extension>]
    static member inline LineHeight<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_LineHeight: unit -> System.Double)
            and 'e : (member set_LineHeight: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_LineHeight() <> value then x.node.set_LineHeight(value))
    
    [<Extension>]
    static member inline Margin<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Margin: unit -> Avalonia.Thickness)
            and 'e : (member set_Margin: Avalonia.Thickness -> unit)
        >
        (this: 'nb, value: Avalonia.Thickness) =
            this.onEval(fun x -> if x.node.get_Margin() <> value then x.node.set_Margin(value))
    
    [<Extension>]
    static member inline MaxDropDownHeight<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MaxDropDownHeight: unit -> System.Double)
            and 'e : (member set_MaxDropDownHeight: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_MaxDropDownHeight() <> value then x.node.set_MaxDropDownHeight(value))
    
    [<Extension>]
    static member inline MaxHeight<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MaxHeight: unit -> System.Double)
            and 'e : (member set_MaxHeight: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_MaxHeight() <> value then x.node.set_MaxHeight(value))
    
    [<Extension>]
    static member inline MaxLength<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MaxLength: unit -> System.Int32)
            and 'e : (member set_MaxLength: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_MaxLength() <> value then x.node.set_MaxLength(value))
    
    [<Extension>]
    static member inline MaxLines<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MaxLines: unit -> System.Int32)
            and 'e : (member set_MaxLines: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_MaxLines() <> value then x.node.set_MaxLines(value))
    
    [<Extension>]
    static member inline MaxWidth<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MaxWidth: unit -> System.Double)
            and 'e : (member set_MaxWidth: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_MaxWidth() <> value then x.node.set_MaxWidth(value))
    
    [<Extension>]
    static member inline MaxYear<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MaxYear: unit -> System.DateTimeOffset)
            and 'e : (member set_MaxYear: System.DateTimeOffset -> unit)
        >
        (this: 'nb, value: System.DateTimeOffset) =
            this.onEval(fun x -> if x.node.get_MaxYear() <> value then x.node.set_MaxYear(value))
    
    [<Extension>]
    static member inline MinHeight<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MinHeight: unit -> System.Double)
            and 'e : (member set_MinHeight: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_MinHeight() <> value then x.node.set_MinHeight(value))
    
    [<Extension>]
    static member inline MinWidth<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MinWidth: unit -> System.Double)
            and 'e : (member set_MinWidth: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_MinWidth() <> value then x.node.set_MinWidth(value))
    
    [<Extension>]
    static member inline MinYear<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MinYear: unit -> System.DateTimeOffset)
            and 'e : (member set_MinYear: System.DateTimeOffset -> unit)
        >
        (this: 'nb, value: System.DateTimeOffset) =
            this.onEval(fun x -> if x.node.get_MinYear() <> value then x.node.set_MinYear(value))
    
    [<Extension>]
    static member inline MinuteIncrement<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MinuteIncrement: unit -> System.Int32)
            and 'e : (member set_MinuteIncrement: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_MinuteIncrement() <> value then x.node.set_MinuteIncrement(value))
    
    [<Extension>]
    static member inline MonthFormat<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MonthFormat: unit -> System.String)
            and 'e : (member set_MonthFormat: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_MonthFormat() <> value then x.node.set_MonthFormat(value))
    
    [<Extension>]
    static member inline MonthVisible<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_MonthVisible: unit -> System.Boolean)
            and 'e : (member set_MonthVisible: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_MonthVisible() <> value then x.node.set_MonthVisible(value))
    
    [<Extension>]
    static member inline Name<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Name: unit -> System.String)
            and 'e : (member set_Name: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_Name() <> value then x.node.set_Name(value))
    
    [<Extension>]
    static member inline NewLine<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_NewLine: unit -> System.String)
            and 'e : (member set_NewLine: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_NewLine() <> value then x.node.set_NewLine(value))
    
    [<Extension>]
    static member inline Opacity<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Opacity: unit -> System.Double)
            and 'e : (member set_Opacity: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_Opacity() <> value then x.node.set_Opacity(value))
    
    [<Extension>]
    static member inline OpacityMask<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_OpacityMask: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_OpacityMask: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_OpacityMask() <> value then x.node.set_OpacityMask(value))
    
    [<Extension>]
    static member inline Orientation<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Orientation: unit -> Avalonia.Layout.Orientation)
            and 'e : (member set_Orientation: Avalonia.Layout.Orientation -> unit)
        >
        (this: 'nb, value: Avalonia.Layout.Orientation) =
            this.onEval(fun x -> if x.node.get_Orientation() <> value then x.node.set_Orientation(value))
    
    [<Extension>]
    static member inline Padding<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Padding: unit -> Avalonia.Thickness)
            and 'e : (member set_Padding: Avalonia.Thickness -> unit)
        >
        (this: 'nb, value: Avalonia.Thickness) =
            this.onEval(fun x -> if x.node.get_Padding() <> value then x.node.set_Padding(value))
    
    [<Extension>]
    static member inline PasswordChar<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_PasswordChar: unit -> System.Char)
            and 'e : (member set_PasswordChar: System.Char -> unit)
        >
        (this: 'nb, value: System.Char) =
            this.onEval(fun x -> if x.node.get_PasswordChar() <> value then x.node.set_PasswordChar(value))
    
    [<Extension>]
    static member inline PlaceholderForeground<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_PlaceholderForeground: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_PlaceholderForeground: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_PlaceholderForeground() <> value then x.node.set_PlaceholderForeground(value))
    
    [<Extension>]
    static member inline PlaceholderText<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_PlaceholderText: unit -> System.String)
            and 'e : (member set_PlaceholderText: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_PlaceholderText() <> value then x.node.set_PlaceholderText(value))
    
    [<Extension>]
    static member inline RenderTransform<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_RenderTransform: unit -> Avalonia.Media.ITransform)
            and 'e : (member set_RenderTransform: Avalonia.Media.ITransform -> unit)
        >
        (this: 'nb, value: Avalonia.Media.ITransform) =
            this.onEval(fun x -> if x.node.get_RenderTransform() <> value then x.node.set_RenderTransform(value))
    
    [<Extension>]
    static member inline RenderTransformOrigin<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_RenderTransformOrigin: unit -> Avalonia.RelativePoint)
            and 'e : (member set_RenderTransformOrigin: Avalonia.RelativePoint -> unit)
        >
        (this: 'nb, value: Avalonia.RelativePoint) =
            this.onEval(fun x -> if x.node.get_RenderTransformOrigin() <> value then x.node.set_RenderTransformOrigin(value))
    
    [<Extension>]
    static member inline Resources<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Resources: unit -> Avalonia.Controls.IResourceDictionary)
            and 'e : (member set_Resources: Avalonia.Controls.IResourceDictionary -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.IResourceDictionary) =
            this.onEval(fun x -> if x.node.get_Resources() <> value then x.node.set_Resources(value))
    
    [<Extension>]
    static member inline RevealPassword<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_RevealPassword: unit -> System.Boolean)
            and 'e : (member set_RevealPassword: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_RevealPassword() <> value then x.node.set_RevealPassword(value))
    
    [<Extension>]
    static member inline RowDefinitions<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_RowDefinitions: unit -> Avalonia.Controls.RowDefinitions)
            and 'e : (member set_RowDefinitions: Avalonia.Controls.RowDefinitions -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.RowDefinitions) =
            this.onEval(fun x -> if x.node.get_RowDefinitions() <> value then x.node.set_RowDefinitions(value))
    
    [<Extension>]
    static member inline SelectedDate<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedDate: unit -> System.Nullable<System.DateTimeOffset>)
            and 'e : (member set_SelectedDate: System.Nullable<System.DateTimeOffset> -> unit)
        >
        (this: 'nb, value: System.Nullable<System.DateTimeOffset>) =
            this.onEval(fun x -> if x.node.get_SelectedDate() <> value then x.node.set_SelectedDate(value))
    
    [<Extension>]
    static member inline SelectedIndex<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedIndex: unit -> System.Int32)
            and 'e : (member set_SelectedIndex: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_SelectedIndex() <> value then x.node.set_SelectedIndex(value))
    
    [<Extension>]
    static member inline SelectedItem<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedItem: unit -> System.Object)
            and 'e : (member set_SelectedItem: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_SelectedItem() <> value then x.node.set_SelectedItem(value))
    
    [<Extension>]
    static member inline SelectedText<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedText: unit -> System.String)
            and 'e : (member set_SelectedText: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_SelectedText() <> value then x.node.set_SelectedText(value))
    
    [<Extension>]
    static member inline SelectedTime<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedTime: unit -> System.Nullable<System.TimeSpan>)
            and 'e : (member set_SelectedTime: System.Nullable<System.TimeSpan> -> unit)
        >
        (this: 'nb, value: System.Nullable<System.TimeSpan>) =
            this.onEval(fun x -> if x.node.get_SelectedTime() <> value then x.node.set_SelectedTime(value))
    
    [<Extension>]
    static member inline SelectedValue<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedValue: unit -> System.Object)
            and 'e : (member set_SelectedValue: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_SelectedValue() <> value then x.node.set_SelectedValue(value))
    
    [<Extension>]
    static member inline SelectedValueBinding<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectedValueBinding: unit -> Avalonia.Data.IBinding)
            and 'e : (member set_SelectedValueBinding: Avalonia.Data.IBinding -> unit)
        >
        (this: 'nb, value: Avalonia.Data.IBinding) =
            this.onEval(fun x -> if x.node.get_SelectedValueBinding() <> value then x.node.set_SelectedValueBinding(value))
    
    [<Extension>]
    static member inline SelectionBrush<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectionBrush: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_SelectionBrush: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_SelectionBrush() <> value then x.node.set_SelectionBrush(value))
    
    [<Extension>]
    static member inline SelectionEnd<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectionEnd: unit -> System.Int32)
            and 'e : (member set_SelectionEnd: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_SelectionEnd() <> value then x.node.set_SelectionEnd(value))
    
    [<Extension>]
    static member inline SelectionForegroundBrush<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectionForegroundBrush: unit -> Avalonia.Media.IBrush)
            and 'e : (member set_SelectionForegroundBrush: Avalonia.Media.IBrush -> unit)
        >
        (this: 'nb, value: Avalonia.Media.IBrush) =
            this.onEval(fun x -> if x.node.get_SelectionForegroundBrush() <> value then x.node.set_SelectionForegroundBrush(value))
    
    [<Extension>]
    static member inline SelectionStart<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_SelectionStart: unit -> System.Int32)
            and 'e : (member set_SelectionStart: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_SelectionStart() <> value then x.node.set_SelectionStart(value))
    
    [<Extension>]
    static member inline ShowGridLines<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ShowGridLines: unit -> System.Boolean)
            and 'e : (member set_ShowGridLines: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_ShowGridLines() <> value then x.node.set_ShowGridLines(value))
    
    [<Extension>]
    static member inline Spacing<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Spacing: unit -> System.Double)
            and 'e : (member set_Spacing: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_Spacing() <> value then x.node.set_Spacing(value))
    
    [<Extension>]
    static member inline TabIndex<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_TabIndex: unit -> System.Int32)
            and 'e : (member set_TabIndex: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_TabIndex() <> value then x.node.set_TabIndex(value))
    
    [<Extension>]
    static member inline Tag<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Tag: unit -> System.Object)
            and 'e : (member set_Tag: System.Object -> unit)
        >
        (this: 'nb, value: System.Object) =
            this.onEval(fun x -> if x.node.get_Tag() <> value then x.node.set_Tag(value))
    
    [<Extension>]
    static member inline Target<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Target: unit -> Avalonia.Input.IInputElement)
            and 'e : (member set_Target: Avalonia.Input.IInputElement -> unit)
        >
        (this: 'nb, value: Avalonia.Input.IInputElement) =
            this.onEval(fun x -> if x.node.get_Target() <> value then x.node.set_Target(value))
    
    [<Extension>]
    static member inline Template<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Template: unit -> Avalonia.Controls.Templates.IControlTemplate)
            and 'e : (member set_Template: Avalonia.Controls.Templates.IControlTemplate -> unit)
        >
        (this: 'nb, value: Avalonia.Controls.Templates.IControlTemplate) =
            this.onEval(fun x -> if x.node.get_Template() <> value then x.node.set_Template(value))
    
    [<Extension>]
    static member inline Text<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Text: unit -> System.String)
            and 'e : (member set_Text: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_Text() <> value then x.node.set_Text(value))
    
    [<Extension>]
    static member inline TextAlignment<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_TextAlignment: unit -> Avalonia.Media.TextAlignment)
            and 'e : (member set_TextAlignment: Avalonia.Media.TextAlignment -> unit)
        >
        (this: 'nb, value: Avalonia.Media.TextAlignment) =
            this.onEval(fun x -> if x.node.get_TextAlignment() <> value then x.node.set_TextAlignment(value))
    
    [<Extension>]
    static member inline TextDecorations<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_TextDecorations: unit -> Avalonia.Media.TextDecorationCollection)
            and 'e : (member set_TextDecorations: Avalonia.Media.TextDecorationCollection -> unit)
        >
        (this: 'nb, value: Avalonia.Media.TextDecorationCollection) =
            this.onEval(fun x -> if x.node.get_TextDecorations() <> value then x.node.set_TextDecorations(value))
    
    [<Extension>]
    static member inline TextTrimming<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_TextTrimming: unit -> Avalonia.Media.TextTrimming)
            and 'e : (member set_TextTrimming: Avalonia.Media.TextTrimming -> unit)
        >
        (this: 'nb, value: Avalonia.Media.TextTrimming) =
            this.onEval(fun x -> if x.node.get_TextTrimming() <> value then x.node.set_TextTrimming(value))
    
    [<Extension>]
    static member inline TextWrapping<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_TextWrapping: unit -> Avalonia.Media.TextWrapping)
            and 'e : (member set_TextWrapping: Avalonia.Media.TextWrapping -> unit)
        >
        (this: 'nb, value: Avalonia.Media.TextWrapping) =
            this.onEval(fun x -> if x.node.get_TextWrapping() <> value then x.node.set_TextWrapping(value))
    
    [<Extension>]
    static member inline Theme<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Theme: unit -> Avalonia.Styling.ControlTheme)
            and 'e : (member set_Theme: Avalonia.Styling.ControlTheme -> unit)
        >
        (this: 'nb, value: Avalonia.Styling.ControlTheme) =
            this.onEval(fun x -> if x.node.get_Theme() <> value then x.node.set_Theme(value))
    
    [<Extension>]
    static member inline Transitions<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Transitions: unit -> Avalonia.Animation.Transitions)
            and 'e : (member set_Transitions: Avalonia.Animation.Transitions -> unit)
        >
        (this: 'nb, value: Avalonia.Animation.Transitions) =
            this.onEval(fun x -> if x.node.get_Transitions() <> value then x.node.set_Transitions(value))
    
    [<Extension>]
    static member inline UndoLimit<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_UndoLimit: unit -> System.Int32)
            and 'e : (member set_UndoLimit: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_UndoLimit() <> value then x.node.set_UndoLimit(value))
    
    [<Extension>]
    static member inline UseFloatingWatermark<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_UseFloatingWatermark: unit -> System.Boolean)
            and 'e : (member set_UseFloatingWatermark: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_UseFloatingWatermark() <> value then x.node.set_UseFloatingWatermark(value))
    
    [<Extension>]
    static member inline UseLayoutRounding<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_UseLayoutRounding: unit -> System.Boolean)
            and 'e : (member set_UseLayoutRounding: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_UseLayoutRounding() <> value then x.node.set_UseLayoutRounding(value))
    
    [<Extension>]
    static member inline VerticalAlignment<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_VerticalAlignment: unit -> Avalonia.Layout.VerticalAlignment)
            and 'e : (member set_VerticalAlignment: Avalonia.Layout.VerticalAlignment -> unit)
        >
        (this: 'nb, value: Avalonia.Layout.VerticalAlignment) =
            this.onEval(fun x -> if x.node.get_VerticalAlignment() <> value then x.node.set_VerticalAlignment(value))
    
    [<Extension>]
    static member inline VerticalContentAlignment<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_VerticalContentAlignment: unit -> Avalonia.Layout.VerticalAlignment)
            and 'e : (member set_VerticalContentAlignment: Avalonia.Layout.VerticalAlignment -> unit)
        >
        (this: 'nb, value: Avalonia.Layout.VerticalAlignment) =
            this.onEval(fun x -> if x.node.get_VerticalContentAlignment() <> value then x.node.set_VerticalContentAlignment(value))
    
    [<Extension>]
    static member inline Watermark<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Watermark: unit -> System.String)
            and 'e : (member set_Watermark: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_Watermark() <> value then x.node.set_Watermark(value))
    
    [<Extension>]
    static member inline Width<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_Width: unit -> System.Double)
            and 'e : (member set_Width: System.Double -> unit)
        >
        (this: 'nb, value: System.Double) =
            this.onEval(fun x -> if x.node.get_Width() <> value then x.node.set_Width(value))
    
    [<Extension>]
    static member inline WrapSelection<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_WrapSelection: unit -> System.Boolean)
            and 'e : (member set_WrapSelection: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_WrapSelection() <> value then x.node.set_WrapSelection(value))
    
    [<Extension>]
    static member inline YearFormat<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_YearFormat: unit -> System.String)
            and 'e : (member set_YearFormat: System.String -> unit)
        >
        (this: 'nb, value: System.String) =
            this.onEval(fun x -> if x.node.get_YearFormat() <> value then x.node.set_YearFormat(value))
    
    [<Extension>]
    static member inline YearVisible<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_YearVisible: unit -> System.Boolean)
            and 'e : (member set_YearVisible: System.Boolean -> unit)
        >
        (this: 'nb, value: System.Boolean) =
            this.onEval(fun x -> if x.node.get_YearVisible() <> value then x.node.set_YearVisible(value))
    
    [<Extension>]
    static member inline ZIndex<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e : (member get_ZIndex: unit -> System.Int32)
            and 'e : (member set_ZIndex: System.Int32 -> unit)
        >
        (this: 'nb, value: System.Int32) =
            this.onEval(fun x -> if x.node.get_ZIndex() <> value then x.node.set_ZIndex(value))
    
    

[<Extension>]
type EventsExtensions =
    
    [<Extension>]
    static member inline AttachedToLogicalTree<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_AttachedToLogicalTree: System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> -> unit)
            and 'e: (member remove_AttachedToLogicalTree: System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_AttachedToLogicalTree(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline AttachedToVisualTree<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_AttachedToVisualTree: System.EventHandler<Avalonia.VisualTreeAttachmentEventArgs> -> unit)
            and 'e: (member remove_AttachedToVisualTree: System.EventHandler<Avalonia.VisualTreeAttachmentEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_AttachedToVisualTree(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Checked<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Checked: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Checked: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Checked(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Click<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Click: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Click: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Click(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Collapsed<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Collapsed: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Collapsed: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Collapsed(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Collapsing<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Collapsing: System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs> -> unit)
            and 'e: (member remove_Collapsing: System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Collapsing(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline ContainerClearing<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_ContainerClearing: System.EventHandler<Avalonia.Controls.ContainerClearingEventArgs> -> unit)
            and 'e: (member remove_ContainerClearing: System.EventHandler<Avalonia.Controls.ContainerClearingEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_ContainerClearing(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline ContainerIndexChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_ContainerIndexChanged: System.EventHandler<Avalonia.Controls.ContainerIndexChangedEventArgs> -> unit)
            and 'e: (member remove_ContainerIndexChanged: System.EventHandler<Avalonia.Controls.ContainerIndexChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_ContainerIndexChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline ContainerPrepared<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_ContainerPrepared: System.EventHandler<Avalonia.Controls.ContainerPreparedEventArgs> -> unit)
            and 'e: (member remove_ContainerPrepared: System.EventHandler<Avalonia.Controls.ContainerPreparedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_ContainerPrepared(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline ContextRequested<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_ContextRequested: System.EventHandler<Avalonia.Controls.ContextRequestedEventArgs> -> unit)
            and 'e: (member remove_ContextRequested: System.EventHandler<Avalonia.Controls.ContextRequestedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_ContextRequested(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline CopyingToClipboard<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_CopyingToClipboard: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_CopyingToClipboard: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_CopyingToClipboard(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline CuttingToClipboard<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_CuttingToClipboard: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_CuttingToClipboard: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_CuttingToClipboard(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline DetachedFromLogicalTree<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_DetachedFromLogicalTree: System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> -> unit)
            and 'e: (member remove_DetachedFromLogicalTree: System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_DetachedFromLogicalTree(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline DetachedFromVisualTree<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_DetachedFromVisualTree: System.EventHandler<Avalonia.VisualTreeAttachmentEventArgs> -> unit)
            and 'e: (member remove_DetachedFromVisualTree: System.EventHandler<Avalonia.VisualTreeAttachmentEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_DetachedFromVisualTree(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline DoubleTapped<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_DoubleTapped: System.EventHandler<Avalonia.Input.TappedEventArgs> -> unit)
            and 'e: (member remove_DoubleTapped: System.EventHandler<Avalonia.Input.TappedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_DoubleTapped(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline EffectiveViewportChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_EffectiveViewportChanged: System.EventHandler<Avalonia.Layout.EffectiveViewportChangedEventArgs> -> unit)
            and 'e: (member remove_EffectiveViewportChanged: System.EventHandler<Avalonia.Layout.EffectiveViewportChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_EffectiveViewportChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Expanded<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Expanded: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Expanded: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Expanded(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Expanding<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Expanding: System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs> -> unit)
            and 'e: (member remove_Expanding: System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Expanding(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline GotFocus<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_GotFocus: System.EventHandler<Avalonia.Input.GotFocusEventArgs> -> unit)
            and 'e: (member remove_GotFocus: System.EventHandler<Avalonia.Input.GotFocusEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_GotFocus(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Holding<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Holding: System.EventHandler<Avalonia.Input.HoldingRoutedEventArgs> -> unit)
            and 'e: (member remove_Holding: System.EventHandler<Avalonia.Input.HoldingRoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Holding(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline HorizontalSnapPointsChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_HorizontalSnapPointsChanged: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_HorizontalSnapPointsChanged: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_HorizontalSnapPointsChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Indeterminate<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Indeterminate: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Indeterminate: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Indeterminate(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline IsCheckedChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_IsCheckedChanged: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_IsCheckedChanged: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_IsCheckedChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline KeyDown<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_KeyDown: System.EventHandler<Avalonia.Input.KeyEventArgs> -> unit)
            and 'e: (member remove_KeyDown: System.EventHandler<Avalonia.Input.KeyEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_KeyDown(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline KeyUp<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_KeyUp: System.EventHandler<Avalonia.Input.KeyEventArgs> -> unit)
            and 'e: (member remove_KeyUp: System.EventHandler<Avalonia.Input.KeyEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_KeyUp(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Loaded<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Loaded: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Loaded: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Loaded(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline LostFocus<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_LostFocus: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_LostFocus: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_LostFocus(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PastingFromClipboard<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PastingFromClipboard: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_PastingFromClipboard: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PastingFromClipboard(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerCaptureLost<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerCaptureLost: System.EventHandler<Avalonia.Input.PointerCaptureLostEventArgs> -> unit)
            and 'e: (member remove_PointerCaptureLost: System.EventHandler<Avalonia.Input.PointerCaptureLostEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerCaptureLost(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerEntered<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerEntered: System.EventHandler<Avalonia.Input.PointerEventArgs> -> unit)
            and 'e: (member remove_PointerEntered: System.EventHandler<Avalonia.Input.PointerEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerEntered(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerExited<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerExited: System.EventHandler<Avalonia.Input.PointerEventArgs> -> unit)
            and 'e: (member remove_PointerExited: System.EventHandler<Avalonia.Input.PointerEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerExited(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerMoved<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerMoved: System.EventHandler<Avalonia.Input.PointerEventArgs> -> unit)
            and 'e: (member remove_PointerMoved: System.EventHandler<Avalonia.Input.PointerEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerMoved(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerPressed<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerPressed: System.EventHandler<Avalonia.Input.PointerPressedEventArgs> -> unit)
            and 'e: (member remove_PointerPressed: System.EventHandler<Avalonia.Input.PointerPressedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerPressed(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerReleased<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerReleased: System.EventHandler<Avalonia.Input.PointerReleasedEventArgs> -> unit)
            and 'e: (member remove_PointerReleased: System.EventHandler<Avalonia.Input.PointerReleasedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerReleased(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PointerWheelChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PointerWheelChanged: System.EventHandler<Avalonia.Input.PointerWheelEventArgs> -> unit)
            and 'e: (member remove_PointerWheelChanged: System.EventHandler<Avalonia.Input.PointerWheelEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PointerWheelChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline PropertyChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_PropertyChanged: System.EventHandler<Avalonia.AvaloniaPropertyChangedEventArgs> -> unit)
            and 'e: (member remove_PropertyChanged: System.EventHandler<Avalonia.AvaloniaPropertyChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_PropertyChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline ResourcesChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_ResourcesChanged: System.EventHandler<Avalonia.Controls.ResourcesChangedEventArgs> -> unit)
            and 'e: (member remove_ResourcesChanged: System.EventHandler<Avalonia.Controls.ResourcesChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_ResourcesChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline SelectedDateChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_SelectedDateChanged: System.EventHandler<Avalonia.Controls.DatePickerSelectedValueChangedEventArgs> -> unit)
            and 'e: (member remove_SelectedDateChanged: System.EventHandler<Avalonia.Controls.DatePickerSelectedValueChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_SelectedDateChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline SelectedTimeChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_SelectedTimeChanged: System.EventHandler<Avalonia.Controls.TimePickerSelectedValueChangedEventArgs> -> unit)
            and 'e: (member remove_SelectedTimeChanged: System.EventHandler<Avalonia.Controls.TimePickerSelectedValueChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_SelectedTimeChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline SelectionChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_SelectionChanged: System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs> -> unit)
            and 'e: (member remove_SelectionChanged: System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_SelectionChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline SizeChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_SizeChanged: System.EventHandler<Avalonia.Controls.SizeChangedEventArgs> -> unit)
            and 'e: (member remove_SizeChanged: System.EventHandler<Avalonia.Controls.SizeChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_SizeChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Tapped<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Tapped: System.EventHandler<Avalonia.Input.TappedEventArgs> -> unit)
            and 'e: (member remove_Tapped: System.EventHandler<Avalonia.Input.TappedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Tapped(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline TemplateApplied<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_TemplateApplied: System.EventHandler<Avalonia.Controls.Primitives.TemplateAppliedEventArgs> -> unit)
            and 'e: (member remove_TemplateApplied: System.EventHandler<Avalonia.Controls.Primitives.TemplateAppliedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_TemplateApplied(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline TextChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_TextChanged: System.EventHandler<Avalonia.Controls.TextChangedEventArgs> -> unit)
            and 'e: (member remove_TextChanged: System.EventHandler<Avalonia.Controls.TextChangedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_TextChanged(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline TextChanging<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_TextChanging: System.EventHandler<Avalonia.Controls.TextChangingEventArgs> -> unit)
            and 'e: (member remove_TextChanging: System.EventHandler<Avalonia.Controls.TextChangingEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_TextChanging(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline TextInput<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_TextInput: System.EventHandler<Avalonia.Input.TextInputEventArgs> -> unit)
            and 'e: (member remove_TextInput: System.EventHandler<Avalonia.Input.TextInputEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_TextInput(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline TextInputMethodClientRequested<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_TextInputMethodClientRequested: System.EventHandler<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs> -> unit)
            and 'e: (member remove_TextInputMethodClientRequested: System.EventHandler<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_TextInputMethodClientRequested(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Unchecked<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Unchecked: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Unchecked: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Unchecked(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline Unloaded<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_Unloaded: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_Unloaded: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_Unloaded(dotnetEventHandler)
        )
    
    [<Extension>]
    static member inline VerticalSnapPointsChanged<'nb,'e,'c when 
            'nb :> NodeBuilder<'e,'c>
            and 'e :> Avalonia.Controls.Control
            and 'e: (member add_VerticalSnapPointsChanged: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
            and 'e: (member remove_VerticalSnapPointsChanged: System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> -> unit)
        > 
        (this: 'nb, handler)
        =
        this.onInit(fun x ->
            // TODO: Remove handler on unmount
            let videEventHandler = Event.handle x.node x.host handler
            let dotnetEventHandler = EventHandler<_>(fun _ args -> videEventHandler args)
            x.node.add_VerticalSnapPointsChanged(dotnetEventHandler)
        )
    


module AttachedProperties =
    
    type Canvas<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    
    type DockPanel<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    
    type Grid<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    
    type TextBlock<'nb,'e
            when 'nb :> NodeBuilder<'e,AvaloniaContext>
            and 'e :> AvaloniaControl>
        = { target: 'nb }
    


[<Extension>]
type CanvasAttachedProperties =
    
    // Entry
    
    [<Extension>]
    static member inline Canvas(this: #NodeBuilder<_,AvaloniaContext>)  =
        { AttachedProperties.Canvas.target = this }

    // Properties
    
    [<Extension>]
    static member inline Left(this: AttachedProperties.Canvas<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Canvas.LeftProperty, value) |> ignore)
    
    [<Extension>]
    static member inline Top(this: AttachedProperties.Canvas<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Canvas.TopProperty, value) |> ignore)
    
    [<Extension>]
    static member inline Right(this: AttachedProperties.Canvas<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Canvas.RightProperty, value) |> ignore)
    
    [<Extension>]
    static member inline Bottom(this: AttachedProperties.Canvas<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Canvas.BottomProperty, value) |> ignore)
    

[<Extension>]
type DockPanelAttachedProperties =
    
    // Entry
    
    [<Extension>]
    static member inline DockPanel(this: #NodeBuilder<_,AvaloniaContext>)  =
        { AttachedProperties.DockPanel.target = this }

    // Properties
    
    [<Extension>]
    static member inline Dock(this: AttachedProperties.DockPanel<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.DockPanel.DockProperty, value) |> ignore)
    

[<Extension>]
type GridAttachedProperties =
    
    // Entry
    
    [<Extension>]
    static member inline Grid(this: #NodeBuilder<_,AvaloniaContext>)  =
        { AttachedProperties.Grid.target = this }

    // Properties
    
    [<Extension>]
    static member inline Column(this: AttachedProperties.Grid<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Grid.ColumnProperty, value) |> ignore)
    
    [<Extension>]
    static member inline Row(this: AttachedProperties.Grid<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Grid.RowProperty, value) |> ignore)
    
    [<Extension>]
    static member inline ColumnSpan(this: AttachedProperties.Grid<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Grid.ColumnSpanProperty, value) |> ignore)
    
    [<Extension>]
    static member inline RowSpan(this: AttachedProperties.Grid<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Grid.RowSpanProperty, value) |> ignore)
    
    [<Extension>]
    static member inline IsSharedSizeScope(this: AttachedProperties.Grid<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.Grid.IsSharedSizeScopeProperty, value) |> ignore)
    

[<Extension>]
type TextBlockAttachedProperties =
    
    // Entry
    
    [<Extension>]
    static member inline TextBlock(this: #NodeBuilder<_,AvaloniaContext>)  =
        { AttachedProperties.TextBlock.target = this }

    // Properties
    
    [<Extension>]
    static member inline BaselineOffset(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.BaselineOffsetProperty, value) |> ignore)
    
    [<Extension>]
    static member inline LineHeight(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.LineHeightProperty, value) |> ignore)
    
    [<Extension>]
    static member inline LetterSpacing(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.LetterSpacingProperty, value) |> ignore)
    
    [<Extension>]
    static member inline MaxLines(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.MaxLinesProperty, value) |> ignore)
    
    [<Extension>]
    static member inline TextAlignment(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.TextAlignmentProperty, value) |> ignore)
    
    [<Extension>]
    static member inline TextWrapping(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.TextWrappingProperty, value) |> ignore)
    
    [<Extension>]
    static member inline TextTrimming(this: AttachedProperties.TextBlock<_,_>, value) =
        this.target.onEval(fun x -> x.node.SetValue(Avalonia.Controls.TextBlock.TextTrimmingProperty, value) |> ignore)
    



